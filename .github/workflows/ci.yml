name: CI â€” Build & Policy Gates

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"

permissions:
  contents: read
  pull-requests: read

env:
  SOLUTION: SE-VIOS-DevFramework.sln
  CONFIGURATION: Release

jobs:
  build:
    name: Build (Windows / MSBuild)
    runs-on: windows-latest
    steps:
      - name: Manual checkout (no external actions)
        shell: bash
        run: |
          set -e
          git init .
          git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git"
          git fetch --depth=1 origin "$GITHUB_SHA"
          git checkout --progress --force "$GITHUB_SHA"

      - name: Fetch submodules via HTTPS using GITHUB_TOKEN
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Rewrite SSH submodule URLs to HTTPS for CI *only*
          git config --global url."https://github.com/".insteadOf git@github.com:
          git submodule sync --recursive
          git -c protocol.version=2 \
              -c http.extraheader="AUTHORIZATION: bearer $GITHUB_TOKEN" \
              submodule update --init --recursive --depth=1

      - name: List solution projects (debug)
        shell: bash
        run: |
          dotnet --version
          dotnet sln SE-VIOS-DevFramework.sln list
      - name: Restore
        shell: pwsh
        run: |
          & dotnet --version
          & dotnet restore "$Env:SOLUTION"

      - name: Build (Release)
        shell: pwsh
        run: |
          & "${{ steps.msbuild.outputs.MSBuild }}" "$Env:SOLUTION" /p:Configuration=$Env:CONFIGURATION /m /verbosity:minimal /restore

  policy_checks:
    name: Policy Checks (C#6/net48/Enclosure/Naming/Headers)
    runs-on: windows-latest
    needs: build
    steps:
      - name: Clone repository (no marketplace actions)
        shell: bash
        run: |
          set -e
          git clone --no-tags --depth=1 "https://github.com/${GITHUB_REPOSITORY}.git" .
          if [ -n "${GITHUB_SHA}" ]; then
            git fetch --no-tags --prune --depth=1 origin "${GITHUB_SHA}"
            git checkout "${GITHUB_SHA}"
          fi

      - name: Run tools/check-architecture.ps1
        shell: pwsh
        run: |
          if (-not (Test-Path "tools/check-architecture.ps1")) {
            Write-Error "Policy script missing: tools/check-architecture.ps1"
            exit 1
          }
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          ./tools/check-architecture.ps1

  pr_acceptance_gate:
    if: ${{ github.event_name == 'pull_request' }}
    name: PR Acceptance Checklist Gate
    runs-on: windows-latest
    needs: [build, policy_checks]
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Load PR body and validate checklist
        shell: pwsh
        env:
          EVENT_PATH: ${{ github.event_path }}
        run: |
          $json = Get-Content -Raw -Path $Env:EVENT_PATH | ConvertFrom-Json
          $body = $json.pull_request.body
          if (-not $body) {
            Write-Error "PR body is empty. Please include the PR Acceptance Checklist."
            exit 1
          }

          # Find the acceptance section and count checkboxes
          $hasSection = $body -match '(?s)##\s*PR\s*Acceptance\s*Checklist.*'
          $checkboxCount = ([regex]::Matches($body, '^- \[( |x|X)\] ', 'Multiline')).Count

          if (-not $hasSection) {
            Write-Error "Missing '## PR Acceptance Checklist' section."
            exit 1
          }
          if ($checkboxCount -lt 5) {
            Write-Error "Checklist appears incomplete (found $checkboxCount checkbox line(s)). Ensure all required items are present."
            exit 1
          }

          Write-Host "PR Acceptance Checklist found with $checkboxCount item(s)."
