name: CI — Build & Policy Gates

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"

permissions:
  contents: read
  pull-requests: read

env:
  SOLUTION: SE-VIOS-DevFramework.sln
  CONFIGURATION: Release

jobs:
  build:
    name: Build (Windows / MSBuild)
    runs-on: windows-latest
    steps:
      - name: Manual checkout (no external actions)
        shell: bash
        run: |
          set -e
          git init .
          git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git"
          git fetch --depth=1 origin "$GITHUB_SHA"
          git checkout --progress --force "$GITHUB_SHA"

      - name: Fetch submodules via HTTPS (public) — disable prompts (Windows-safe)
        shell: bash
        run: |
          set -euo pipefail
          # Make Git completely non-interactive
          export GIT_TERMINAL_PROMPT=0
          export GCM_INTERACTIVE=never
          git config --global core.askPass ""
          git config --global credential.interactive never
          # On some Windows images, GCM is preconfigured; remove/override it:
          git config --global --unset-all credential.helper || true
          git config --system --unset credential.helper || true

          # Ensure all submodule URLs are HTTPS (not SSH) for CI
          if [ -f .gitmodules ]; then
            sed -i 's#git@github.com:#https://github.com/#g' .gitmodules
            sed -i 's#ssh://git@github.com/#https://github.com/#g' .gitmodules
          fi
          git submodule sync --recursive

          # Update — should succeed anonymously for public repos
          GIT_CURL_VERBOSE=1 git submodule update --init --recursive --depth=1

      - name: List solution projects (debug)
        shell: bash
        run: |
          dotnet --version
          dotnet sln SE-VIOS-DevFramework.sln list

      - name: Restore only (no build; MDK needs Steam on runner)
        shell: pwsh
        run: |
          dotnet --version
          dotnet restore "$Env:SOLUTION"

  policy_checks:
    name: Policy Checks (C#6/net48/Enclosure/Naming/Headers)
    runs-on: windows-latest
    needs: build
    steps:
      - name: Manual checkout (no external actions)
        shell: bash
        run: |
          set -euo pipefail
          git init .
          git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git"
          git fetch --depth=1 origin "$GITHUB_SHA"
          git checkout --progress --force "$GITHUB_SHA"

      - name: Fetch submodules via HTTPS (public) — disable prompts (Windows-safe)
        shell: bash
        run: |
          set -euo pipefail
          # Make Git completely non-interactive
          export GIT_TERMINAL_PROMPT=0
          export GCM_INTERACTIVE=never
          git config --global core.askPass ""
          git config --global credential.interactive never
          git config --global --unset-all credential.helper || true
          git config --system --unset credential.helper || true

          # Ensure all submodule URLs are HTTPS (not SSH) for CI
          if [ -f .gitmodules ]; then
            sed -i 's#git@github.com:#https://github.com/#g' .gitmodules
            sed -i 's#ssh://git@github.com/#https://github.com/#g' .gitmodules
          fi
          git submodule sync --recursive

          # Update — should succeed anonymously for public repos
          GIT_CURL_VERBOSE=1 git submodule update --init --recursive --depth=1

      - name: Run tools/check-architecture.ps1
        shell: pwsh
        run: |
          if (-not (Test-Path "tools/check-architecture.ps1")) {
            Write-Error "Policy script missing: tools/check-architecture.ps1"
            exit 1
          }
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          ./tools/check-architecture.ps1

  pr_acceptance_gate:
    if: ${{ github.event_name == 'pull_request' }}
    name: PR Acceptance Checklist Gate
    runs-on: windows-latest
    needs: [build, policy_checks]
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Validate PR body checklist
        # Use the built-in GITHUB_EVENT_PATH env var; no extra actions needed
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          # 1) Load the event payload first
          if (-not $Env:GITHUB_EVENT_PATH -or -not (Test-Path $Env:GITHUB_EVENT_PATH)) {
            Write-Warning "GITHUB_EVENT_PATH is missing; will fall back to GitHub API."
            $json = $null
          } else {
            $json = Get-Content -Raw -Path $Env:GITHUB_EVENT_PATH | ConvertFrom-Json
          }

          $body = $null
          if ($json -and $json.pull_request -and $json.pull_request.body) {
            $body = [string]$json.pull_request.body
          }

          # 2) Fallback: fetch PR body via API (sometimes event body is null if edited after opening)
          if (-not $body -and $Env:REPO -and $Env:PR_NUMBER) {
            try {
              $headers = @{ Authorization = "Bearer $Env:GITHUB_TOKEN"; "X-GitHub-Api-Version" = "2022-11-28" }
              $url = "https://api.github.com/repos/$($Env:REPO)/pulls/$($Env:PR_NUMBER)"
              $resp = Invoke-RestMethod -Method GET -Uri $url -Headers $headers
              if ($resp -and $resp.body) { $body = [string]$resp.body }
            } catch {
              Write-Warning "Fallback API call to load PR body failed: $($_.Exception.Message)"
            }
          }

          if (-not $body) {
            Write-Error "PR body is empty. Please include the PR Acceptance Checklist."
            exit 1
          }

          # 3) Validate presence of section header and >= 5 checkboxes
          $hasSection = [regex]::IsMatch($body, '(?s)^\s*##\s*PR\s*Acceptance\s*Checklist\b', 'IgnoreCase, Multiline')
          # Checkboxes must look like: "- [ ] ..." or "- [x] ..."
          $checkboxCount = ([regex]::Matches($body, '^- \[( |x|X)\] ', 'Multiline')).Count

          if (-not $hasSection) {
            Write-Error "Missing '## PR Acceptance Checklist' section."
            exit 1
          }
          if ($checkboxCount -lt 5) {
            Write-Error "Checklist appears incomplete (found $checkboxCount checkbox line(s)). Ensure at least 5 items are present."
            exit 1
          }

          Write-Host "PR Acceptance Checklist found with $checkboxCount item(s)."
