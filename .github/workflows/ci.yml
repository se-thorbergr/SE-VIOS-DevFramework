name: CI — Build & Policy Gates

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs-validate.yml"

permissions:
  contents: read
  pull-requests: read

env:
  SOLUTION: SE-VIOS-DevFramework.sln
  CONFIGURATION: Release

jobs:
  build:
    name: Build (Windows / MSBuild)
    runs-on: windows-latest
    steps:
      - name: Manual checkout (no external actions)
        shell: bash
        run: |
          set -e
          git init .
          git remote add origin "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git"
          git fetch --depth=1 origin "$GITHUB_SHA"
          git checkout --progress --force "$GITHUB_SHA"

      - name: Fetch submodules via HTTPS (public) — disable prompts (Windows-safe)
        shell: bash
        run: |
          set -euo pipefail
          # Make Git completely non-interactive
          export GIT_TERMINAL_PROMPT=0
          export GCM_INTERACTIVE=never
          git config --global core.askPass ""
          git config --global credential.interactive never
          # On some Windows images, GCM is preconfigured; remove/override it:
          git config --global --unset-all credential.helper || true
          git config --system --unset credential.helper || true

          # Ensure all submodule URLs are HTTPS (not SSH) for CI
          if [ -f .gitmodules ]; then
            sed -i 's#git@github.com:#https://github.com/#g' .gitmodules
            sed -i 's#ssh://git@github.com/#https://github.com/#g' .gitmodules
          fi
          git submodule sync --recursive

          # Update — should succeed anonymously for public repos
          GIT_CURL_VERBOSE=1 git submodule update --init --recursive --depth=1

      - name: List solution projects (debug)
        shell: bash
        run: |
          dotnet --version
          dotnet sln SE-VIOS-DevFramework.sln list

      - name: Restore
        shell: pwsh
        run: |
          & dotnet --version
          & dotnet restore "$Env:SOLUTION"

      - name: Locate MSBuild (vswhere + fallbacks)
        id: msbuild
        shell: pwsh
        run: |
          $outPath = $Env:GITHUB_OUTPUT
          $msbuild = $null
          $vswhere = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"

          if (Test-Path $vswhere) {
            $msbuild = & $vswhere -latest -prerelease -products * -requires Microsoft.Component.MSBuild `
                       -find MSBuild\**\Bin\MSBuild.exe | Select-Object -First 1
          }

          if (-not $msbuild) {
            $cmd = Get-Command msbuild.exe -ErrorAction SilentlyContinue
            if ($cmd) { $msbuild = $cmd.Source }
          }

          if ($msbuild) {
            "MSBuild=$msbuild" | Out-File -FilePath $outPath -Append
            Write-Host "Resolved MSBuild: $msbuild"
          } else {
            "MSBuild=" | Out-File -FilePath $outPath -Append
            Write-Warning "MSBuild.exe not found; will fall back to 'dotnet build'."
          }

      - name: Build (Release)
        shell: pwsh
        run: |
          $msbuild = "${{ steps.msbuild.outputs.MSBuild }}"
          if ([string]::IsNullOrWhiteSpace($msbuild)) {
            Write-Host "MSBuild path not resolved — falling back to 'dotnet build'"
            dotnet build "$Env:SOLUTION" -c "$Env:CONFIGURATION" --no-restore
          } else {
            & $msbuild "$Env:SOLUTION" /p:Configuration=$Env:CONFIGURATION /m /verbosity:minimal /restore
          }

  policy_checks:
    name: Policy Checks (C#6/net48/Enclosure/Naming/Headers)
    runs-on: windows-latest
    needs: build
    steps:
      - name: Clone repository (no marketplace actions)
        shell: bash
        run: |
          set -e
          git clone --no-tags --depth=1 "https://github.com/${GITHUB_REPOSITORY}.git" .
          if [ -n "${GITHUB_SHA}" ]; then
            git fetch --no-tags --prune --depth=1 origin "${GITHUB_SHA}"
            git checkout "${GITHUB_SHA}"
          fi

      - name: Run tools/check-architecture.ps1
        shell: pwsh
        run: |
          if (-not (Test-Path "tools/check-architecture.ps1")) {
            Write-Error "Policy script missing: tools/check-architecture.ps1"
            exit 1
          }
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          ./tools/check-architecture.ps1

  pr_acceptance_gate:
    if: ${{ github.event_name == 'pull_request' }}
    name: PR Acceptance Checklist Gate
    runs-on: windows-latest
    needs: [build, policy_checks]
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Load PR body and validate checklist
        shell: pwsh
        env:
          EVENT_PATH: ${{ github.event_path }}
        run: |
          $json = Get-Content -Raw -Path $Env:EVENT_PATH | ConvertFrom-Json
          $body = $json.pull_request.body
          if (-not $body) {
            Write-Error "PR body is empty. Please include the PR Acceptance Checklist."
            exit 1
          }

          # Find the acceptance section and count checkboxes
          $hasSection = $body -match '(?s)##\s*PR\s*Acceptance\s*Checklist.*'
          $checkboxCount = ([regex]::Matches($body, '^- \[( |x|X)\] ', 'Multiline')).Count

          if (-not $hasSection) {
            Write-Error "Missing '## PR Acceptance Checklist' section."
            exit 1
          }
          if ($checkboxCount -lt 5) {
            Write-Error "Checklist appears incomplete (found $checkboxCount checkbox line(s)). Ensure all required items are present."
            exit 1
          }

          Write-Host "PR Acceptance Checklist found with $checkboxCount item(s)."
